//https://github.com/utopiat-ire/AtCoder.Produire
※コンソール
※コンパイル
コンソールから受け取って「 」で区切って{【N：整数】,【Q：整数】}とみなす

DSUとして素集合データ構造(N)を作る
Q回繰り返す
	コンソールから受け取って「 」で区切って{【T：整数】,【U：整数】,【V：整数】}とみなす
	Tが0なら
		DSUでUとVをマージする
	他なら
		DSUでUとVが同じなら
			コンソールに「1」を出力して改行
		他なら
			コンソールに「0」を出力して改行
		そして
	そして
そして

素集合データ構造とは
	-n:整数
	-親:整数の配列
	-最大値:整数
	はじめ(n)の手順
		この最大値=n
		【数】に1からnまで繰り返す
			親(数)=-1
		そして
	終わり
	自分で【a:整数】と、【b:整数】をマージする手順
		【x:整数】=aを代表
		【y:整数】=bを代表
		xがyならxを返す
		-親(x+1)<-親(y+1)なら
			xとyを交換する
		そして
		親(x+1)に親(y+1)を足す
		親(y+1)=x
		xを返す
	終わり
	自分で【a:整数】と、【b:整数】が同じ手順
		【x】=aを代表
		【y】=bを代表
		(x=y)を返す
	終わり
	【a】を代表する手順:整数
		親(a+1)が0未満ならaを返す
		親(a+1)=親(a+1)を代表
		親(a+1)を返す
	終わり
	【a】の、サイズを求める手順:整数
		親(aを代表)を返す
	終わり
	グループの手順
		代表元集=整数の配列(n)を作る
		グループサイズ集=整数の配列(n)を作る
		【数】
		数に1からnまで繰り返す
			代表元集(数)=数を代表
			グループサイズ集(代表元集(数))を増やす
		そして
		結果という整数の配列の配列を作る
		数に1からnまで繰り返す
			{グループサイズ集(数)}を結果に加える
		そして
		数に1からnまで繰り返す
			結果(代表元集(数))を数を加える
		そして
		結果を返す
	終わり
終わり