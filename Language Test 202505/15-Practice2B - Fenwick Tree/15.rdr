//https://github.com/utopiat-ire/AtCoder.Produire
※コンソール
※コンパイル
コンソールから受け取って「 」で区切って{【N：整数】,【Q：整数】}とみなす

BITとしてフェニック木(N)を作る
コンソールから受け取って「 」で区切ってAとする
【数】に1からNまで繰り返す
	BITで数にA(数)を加える
そして

Q回繰り返す
	コンソールから受け取って「 」で区切って{【A：整数】,【B：整数】,【C：整数】}とみなす
	Aが0なら
		BITでB+1にCを加える
	他なら
		コンソールに「[BITで(B+1)から(C)まで総和したもの]」を出力して改行
	そして
そして

フェニック木とは
	+木:長整数の配列
	-N:整数
	-最高値:整数
	はじめ(N)の手順
		このN=N
		木(N)=0
		【数】に1からnまで繰り返す
			木(数)=0
		そして
	終わり
	※説明　一点加算
	自分で【p:整数】に【x:長整数】を加える手順
		【数】=p
		数がN+1以下の間、繰り返す
			木(数)にxを足す
			数に(数と(-数)の論理積)を足す
		そして
	終わり
	※説明　(l, r] の和を求める
	自分で【l:整数】から【r:整数】まで総和する手順:長整数
		(rまで総和したもの)-((l-1)まで総和したもの)を返す
	終わり
	※説明　[0, r] の和を求める
	自分で【r:整数】まで総和する手順:長整数
		【合計:長整数】=0
		【数】=r
		数が1以上の間、繰り返す
			合計に木(数)を足す
			数から(数と(-数)の論理積)を引く
		そして
		合計を返す
	終わり
	※説明　0からの区間和がtとなる最小の位置xを返す
	自分で【t:整数】まで最小区間する手順:整数
		tが0以下なら0を返す
		【x】=0
		【数】を最高値から1まで減らしながら繰り返す
			x+数がN以下かつ木(x+数)がt未満なら
				tから木(x+数)を引く
				xに数を足す
			そして
		そして
		x+1を返す
	終わり
終わり