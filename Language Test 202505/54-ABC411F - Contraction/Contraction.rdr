//https://github.com/utopiat-ire/AtCoder.Produire
※コンソール
※コンパイル
コンソールから受け取って「 」で区切って{【N：整数】,【M：整数】}とみなす
【UV:整数の配列の配列】={}
【E:整数の配列の配列】={}
N回繰り返す
	Eに{}を加える
そして
M回繰り返す
	コンソールから受け取って「 」で区切って{【U：整数】,【V：整数】}とみなす
	Uを減らす
	Vを減らす
	E#[U]にVを加える
	E#[V]にUを加える
	UVに{U,V}を加える
そして

コンソールから受け取って【Q:整数】とする
コンソールから受け取って「 」で区切って【X:整数の配列】とする
DSUとして素集合データ構造(N)を作る
【ans】=M
Xを要素にそれぞれ繰り返す
	UV#[要素-1]を{ui,vi}とみなす
	DSUでuiとviが同じなら
		ansをコンソールに出力して改行する
		続ける
	そして
	ui=dsuでuiを代表する
	vi=dsuでviを代表する
	DSUでuiとviをマージする
	x1=dsuでuiを代表する
	x1がuiなら
		y1=vi
	他なら
		y1=ui
	そして
	E#[x1]からy1を探して消す
	E#[y1]からx1を探して消す
	ansを減らす
	E#[y1]のクローンを【z:整数】にそれぞれ繰り返す
		E#[x1]にzが存在すれば
			E#[y1]からzを探して消す
			ansを減らす
		そして
		E#[z]からy1を探して消す
		E#[z]にx1が存在しなければ
			E#[z]にx1を加える
		そして
	そして
	(E#[x1])に(E#[y1])を結合したもの
	E#[y1]={}
	ansをコンソールに出力して改行
そして


【A:整数の配列】に【B:整数の配列】を結合する手順
	Bを【要素】にそれぞれ繰り返す
		Aに要素が存在しなければ、Aに[要素]を加える
	そして
終わり

素集合データ構造とは
	-n:整数
	-親:整数の配列
	-最大値:整数
	はじめ(n)の手順
		この最大値=n
		【数】に1からnまで繰り返す
			親(数)=-1
		そして
	終わり
	自分で【a:整数】と、【b:整数】をマージする手順
		【x:整数】=aを代表
		【y:整数】=bを代表
		xがyならxを返す
		-親(x+1)<-親(y+1)なら、xとyを交換する
		親(x+1)に親(y+1)を足す
		親(y+1)=x
		xを返す
	終わり
	自分で【a:整数】と、【b:整数】が同じ手順
		【x】=aを代表
		【y】=bを代表
		(x=y)を返す
	終わり
	自分で【a:整数】を代表する手順:整数
		親(a+1)が0未満ならaを返す
		親(a+1)=親(a+1)を代表
		親(a+1)を返す
	終わり
	【a:整数】の、サイズを求める手順:整数
		親(aを代表)を返す
	終わり
	グループの手順
		代表元集=整数の配列(n)を作る
		グループサイズ集=整数の配列(n)を作る
		【数】
		数に1からnまで繰り返す
			代表元集(数)=数を代表
			グループサイズ集(代表元集(数))を増やす
		そして
		【結果】という整数の配列の配列を作る
		数に1からnまで繰り返す
			{グループサイズ集(数)}を結果に加える
		そして
		数に1からnまで繰り返す
			結果(代表元集(数))に数を加える
		そして
		結果を返す
	終わり
終わり

【配列:整数の配列】から、【要素:整数】を探して消す手順
	配列から要素をひとつ探して【結果】とする
	結果が0でなければ配列から(結果)番目を消す
終わり
